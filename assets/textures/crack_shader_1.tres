[gd_resource type="VisualShader" load_steps=14 format=2]

[ext_resource path="res://assets/textures/health_cracked1.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeVectorOp" id=5]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeVectorFunc" id=6]
output_port_for_preview = 0
function = 6

[sub_resource type="VisualShaderNodeVectorOp" id=7]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorDecompose" id=8]

[sub_resource type="VisualShaderNodeScalarOp" id=9]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=10]
default_input_values = [ 0, 0.0, 1, 4.0 ]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=1]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=3]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=11]
input_name = "color"

[sub_resource type="VisualShaderNodeVectorOp" id=12]
default_input_values = [ 0, Vector3( 0.1, 0.1, 0.1 ), 1, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeInput" id=13]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorClamp" id=14]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0.5 ), 2, Vector3( 1, 1, 1 ) ]

[resource]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_2;



void vertex() {
// Output:0

}

void fragment() {
// Input:6
	vec3 n_out6p0 = COLOR.rgb;

// Input:8
	vec3 n_out8p0 = vec3(UV, 0.0);

// VectorOp:10
	vec3 n_in10p1 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_out10p0 = n_out8p0 - n_in10p1;

// VectorFunc:11
	vec3 n_out11p0 = abs(n_out10p0);

// VectorOp:12
	vec3 n_in12p1 = vec3(1.00000, 1.00000, 0.00000);
	vec3 n_out12p0 = n_out11p0 * n_in12p1;

// VectorDecompose:13
	float n_out13p0 = n_out12p0.x;
	float n_out13p1 = n_out12p0.y;
	float n_out13p2 = n_out12p0.z;

// ScalarOp:15
	float n_out15p0 = n_out13p0 * n_out13p1;

// ScalarOp:16
	float n_in16p1 = 4.00000;
	float n_out16p0 = n_out15p0 * n_in16p1;

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// VectorOp:7
	vec3 n_out7p0 = vec3(n_out16p0) + n_out2p0;

// VectorClamp:9
	vec3 n_in9p1 = vec3(0.50000, 0.50000, 0.50000);
	vec3 n_in9p2 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out9p0 = clamp(n_out7p0, n_in9p1, n_in9p2);

// VectorOp:5
	vec3 n_out5p0 = n_out6p0 * n_out9p0;

// Output:0
	COLOR.rgb = n_out5p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -878.089, 5.7261 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 460, 220 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -440, 300 )
nodes/fragment/5/node = SubResource( 3 )
nodes/fragment/5/position = Vector2( 220, 200 )
nodes/fragment/6/node = SubResource( 11 )
nodes/fragment/6/position = Vector2( -20, 80 )
nodes/fragment/7/node = SubResource( 12 )
nodes/fragment/7/position = Vector2( -180, 280 )
nodes/fragment/8/node = SubResource( 13 )
nodes/fragment/8/position = Vector2( -1400, 100 )
nodes/fragment/9/node = SubResource( 14 )
nodes/fragment/9/position = Vector2( 20, 300 )
nodes/fragment/10/node = SubResource( 5 )
nodes/fragment/10/position = Vector2( -1260, 40 )
nodes/fragment/11/node = SubResource( 6 )
nodes/fragment/11/position = Vector2( -1120, 40 )
nodes/fragment/12/node = SubResource( 7 )
nodes/fragment/12/position = Vector2( -920, 80 )
nodes/fragment/13/node = SubResource( 8 )
nodes/fragment/13/position = Vector2( -760, 100 )
nodes/fragment/15/node = SubResource( 9 )
nodes/fragment/15/position = Vector2( -540, 160 )
nodes/fragment/16/node = SubResource( 10 )
nodes/fragment/16/position = Vector2( -360, 160 )
nodes/fragment/connections = PoolIntArray( 5, 0, 0, 0, 6, 0, 5, 0, 2, 0, 7, 1, 7, 0, 9, 0, 9, 0, 5, 1, 8, 0, 10, 0, 10, 0, 11, 0, 11, 0, 12, 0, 12, 0, 13, 0, 13, 0, 15, 0, 13, 1, 15, 1, 15, 0, 16, 0, 16, 0, 7, 0 )
